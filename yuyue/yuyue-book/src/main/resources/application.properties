# 应用名称
spring.application.name=yuyue-book

# Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html
# Nacos认证信息
spring.cloud.nacos.discovery.username=nacos
spring.cloud.nacos.discovery.password=nacos
# Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
# 注册到 nacos 的指定 namespace，默认为 public
spring.cloud.nacos.discovery.namespace=3399f824-3168-435e-a977-d15ab7fb2bcd

# 应用服务 WEB 访问端口
server.port=8086

# Actuator Web 访问端口
management.server.port=8087
management.endpoints.jmx.exposure.include=*
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# 指定使用什么注册中心 dubbo 协议
dubbo.protocol.id=dubbo
dubbo.protocol.name=dubbo
# dubbo 协议端口（ -1 表示自增端口，从 20880 开始）
dubbo.protocol.port=-1
# Dubbo 消费端订阅服务端的应用名，多个服务提供者用逗号分隔
# 这里订阅"自己"，会被忽略掉，请根据实际情况添加 ,log-demo
dubbo.cloud.subscribed-services=yuyue-jwt,yuyue-book,yuyue-user,yuyue-integral
# dubbo 服务扫描基准包
dubbo.scan.base-packages=com.trkj.yuyuebook
# 设置是否检查服务存在
dubbo.consumer.check=false
# 设置超时时间
dubbo.consumer.timeout=600000

#dubbo.application.id=dubbo-book-example
#dubbo.application.name=dubbo-book-example
#dubbo.application.qos-enable=false
##取值为 remote 或 local， 默认 local。对于 应用的元数据，Dubbo提供了两种保存方式 【本地保存】 和 【元数据中心保存】。
## 如果为local ，则会将应用的元数据信息保存在应用本地，否则则会将元数据信息保存到 metadata-report.address 指定的元数据中心中。
## 因此，当此属性为 remote 时， 必须存在 metadata-report.address 配置
#dubbo.application.metadata-type=remote
#dubbo.registry.id=dubbo-book-example-registry
## 元数据中心
##指定注册中心的地址
#dubbo.registry.address=nacos://127.0.0.1:8848?namespace=bc36cc8c-f0ea-478e-aeea-2d6ef5f116b0
#dubbo.config-center.address=nacos://127.0.0.1:8848?namespace=bc36cc8c-f0ea-478e-aeea-2d6ef5f116b0
#dubbo.metadata-report.address=nacos://127.0.0.1:8848?namespace=bc36cc8c-f0ea-478e-aeea-2d6ef5f116b0
#dubbo.consumer.provided-by=dubbo-user-example

# 分布式事务配置
seata.enabled=true
seata.application-id=book-seata-example
# 事务群组（可以每个应用独立取名，也可以使用相同的名字）
seata.tx-service-group=book_group
seata.registry.type=nacos
seata.registry.nacos.server-addr=localhost:8848
seata.registry.nacos.namespace=3399f824-3168-435e-a977-d15ab7fb2bcd
seata.registry.nacos.cluster=default
seata.registry.nacos.data-id=seataServer.properties
seata.registry.nacos.group=SEATA_GROUP
seata.config.type=nacos
seata.config.nacos.namespace=3399f824-3168-435e-a977-d15ab7fb2bcd
seata.config.nacos.server-addr=localhost:8848
seata.config.nacos.group=SEATA_GROUP
seata.config.nacos.username=nacos
seata.config.nacos.password=nacos
seata.config.nacos.data-id=seataServer.properties
seata.enable-auto-data-source-proxy=true
seata.data-source-proxy-mode=AT

#微服务应用名称
#seata.application-id=${spring.application.name}
#seata.config.nacos.data-id=seataServer.properties
#seata.config.nacos.group=SEATA_GROUP
#seata.config.nacos.namespace=${spring.cloud.nacos.discovery.namespace}
#seata.config.nacos.password=nacos
#seata.config.nacos.server-addr=localhost:8848
#seata.config.nacos.username=nacos
#seata.config.type=nacos
#seata.enabled=true
#seata.registry.nacos.cluster=default
#seata.registry.nacos.data-id=seataServer.properties
#seata.registry.nacos.group=SEATA_GROUP
#seata.registry.nacos.namespace=${spring.cloud.nacos.discovery.namespace}
#seata.registry.nacos.server-addr=localhost:8848
#seata.registry.type=nacos
#seata.tx-service-group=book_group
